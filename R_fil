
________________________________________________________________________________
________________________________________________________________________________
## Inläsning av packages

```{r message=FALSE, warning=FALSE, echo=FALSE}
# loading in packages
library(tidyverse) # Includes ggplot2, readr, dplyr, and stringr
library(tinytex)
library(ggpubr)
library(knitr)
library(xtable)
library(GGally)
library(car)
library(lmtest)
library(olsrr)
library(MASS)
library(openxlsx)
```


________________________________________________________________________________
________________________________________________________________________________
## Globala Funktioner

### omit.col
```{r}
##-----------------------------------------------------------------------------
## omit.col
##
## Function to remove unwanted columns from a data.frame
##
## Variable 1 : df - dataframe in question
## Variable 2 :  v - Vector of colnames getting removed
##-----------------------------------------------------------------------------

omit.col <- function(df, v) {
  cols_to_remove <- v[v %in% names(df)]
  df <- df[, !(names(df) %in% cols_to_remove)]
  return(df)
}

```

### create_interactions
```{r}
##-----------------------------------------------------------------------------
## create_interactions
##
## Function to create first degree interactions between factors
## as well as basevariables squared
##
## Variable 1 : df - dataframe in question
## Variable 2 : y  - Response variable
## Variable 3 : v  - vector of variables excluded from the process
##-----------------------------------------------------------------------------

create_interactions <- function(df, y = NULL, v = c()) {
  
  v <- as.vector(v)
  
  # Exkluderar variabler
  cols_to_exclude <- c(y, v)
  interaction_cols <- setdiff(names(df), cols_to_exclude)
  
  # Skapar resultat vektor
  results <- list()
  
  # skapar interaktioner och sätter in dem i resultat
  for (i in 1:(length(interaction_cols) - 1)) {
    for (j in (i):length(interaction_cols)) {
      col_name_i <- interaction_cols[i]
      col_name_j <- interaction_cols[j]
      interaction_name <- paste(col_name_i, "x", col_name_j, sep = " ")
      results[[interaction_name]] <- df[[col_name_i]] * df[[col_name_j]]
    }
  }
  
  # kombinerar orignalet med nya interaktioner
  df_with_interactions <- cbind(df, do.call(cbind, results))
  
  return(df_with_interactions)
}
```

### Interaction_LR_test
```{r}

##-----------------------------------------------------------------------------
## Interaction_LR_test
##
## Function that perform LR test on Interactions that have high P-values
## Return a vector of the Variables it removed for the reduced model
##
## Variable 1 :             Full_df - dataframe for the full modell
## Variable 2 : amount_of_basevars  - amount of Variable that are not interactions
##
##      note : baseVariables need to come first in Full_df
##-----------------------------------------------------------------------------

Interaction_LR_test <- function(Full_df, amount_of_basevars) {
  
  # Full model
  model_FULL <- glm(`Shots on Target` ~ ., family = "poisson", data = Full_df)
  
  # Tar ut interaktioner som INTE skulle vara signifikanta genom wald-test
  pvals <- summary(model_FULL)$coefficients[, 4]
  pvals <- pvals[-(1:amount_of_basevars)]
  pvals <- pvals[pvals > 0.05]
  
  # tar bort "`"
  pvals <- names(pvals)
  pvals <- str_remove_all(pvals, "`")
  
  # Skapar reducerad df utan icke signifikanta interaktioner
  lessinteraction_df <- Full_df %>%
    omit.col(c(MDV_vec, RMV_vec, pvals))
  
  # Skapar reducerad modell utan icke signifikanta interaktioner
  model_lessinteraction <- glm(`Shots on Target` ~ ., family = "poisson",
                               data = lessinteraction_df)
  
  # Likelihood Test
  A <- logLik(model_lessinteraction)
  B <- logLik(model_FULL)
  teststat <- -2 * (as.numeric(A) - as.numeric(B))
  
  # p-värde
  p.val <- pchisq(teststat, df = ncol(Full_df) - ncol(lessinteraction_df),
                  lower.tail = FALSE)
  
  # Print p-value
  print(paste("LR Test p-värde:", p.val))
  
  return(pvals)
}
```


### forwardAIC_poisson 
```{r message=FALSE, warning=FALSE}

forwardAIC_poisson <- function(data, response_var) {
  # Correctly handle responsevariables with spaces or special characters
  response_var_safe <- paste("`", response_var, "`", sep="")
  
  # Start with the intercept-only model
  formula <- as.formula(paste(response_var_safe, "~ 1"))
  current_aic <- AIC(glm(formula, data = data, family = "poisson"))
  
  # Store all variables except the response variable
  variables <- setdiff(names(data), response_var)
  
  # Keep track of variables added to the model
  selected_vars <- c()
  
  repeat {
    aic_with_var <- sapply(variables, function(var) {
      # Ensure variable names with spaces or special characters are handled correctly
      var_safe <- paste("`", var, "`", sep="")
      formula_try <- update(formula, as.formula(paste(". ~ . +", var_safe)))
      model_try <- glm(formula_try, data = data, family = "poisson")
      return(AIC(model_try))
    })
    
    # Find the variable that, when added, results in the lowest AIC
    min_aic <- min(aic_with_var)
    if (min_aic < current_aic) {
      # Update the model with this variable
      best_var <- variables[which.min(aic_with_var)]
      selected_vars <- c(selected_vars, best_var)
      # Ensure the best_var is safely added to the formula
      best_var_safe <- paste("`", best_var, "`", sep="")
      formula <- update(formula, as.formula(paste(". ~ . +", best_var_safe)))
      current_aic <- min_aic
      # Remove the added variable from the list of candidates
      variables <- setdiff(variables, best_var)
    } else {
      # Exit if no improvement
      break
    }
  }
  
  # Final model
  final_model <- glm(formula, data = data, family = "poisson")
  cat("#n of coefficents:", length(selected_vars), "\n")
  return(final_model)
}


```


________________________________________________________________________________
________________________________________________________________________________
## Inläsning av Grund-Data och skapandet av Data frames


### Grund-data
```{r message=FALSE, warning=FALSE}

# inläsning av Datamaterialet
Grund_data <- read_csv2(file = "fotbollSpelareMatch.csv")

# tar bort den extra nollan på relevanta kolumner
Grund_data$Season <- as.numeric(Grund_data$Season) / 10
Grund_data$Division <- as.numeric(Grund_data$Division) / 10 




```


### Player Match-data
```{r message=FALSE, warning=FALSE}

# Dataframe över en spelares prestationer över en match

# Tar bort attribut-värden 
Player_Mdf <- Grund_data[,c(1:46)]
Player_Mdf$`Average Rating` <- NULL
Player_Mdf <- Player_Mdf[Player_Mdf$Position != "GK", ]

```


### Team Match-data
```{r message=FALSE, warning=FALSE}

# Data frame över ett lags prestationer över en match

# Agregerar över relevanta variabler i matchdata
Team_Mdf <- Player_Mdf %>%
  group_by(Club, Opponent, Matchday, Division, Result, Season) %>%
  summarise(across(where(is.numeric), sum), .groups = 'drop') %>%
  # Förlorade variabler
  omit.col(c("Name", "Nationality", "Position", "Penalties Taken", "Goals",
             "Penalties Scored", "Tackle%", "Cross%", "Header%", "Pass%", "Apps",
             "Player of the Match","xG", "Mistakes Leading to Goals")) %>%
  
  
  # Splittar upp results och lägger till poäng, 
  mutate(Team_Goals = as.numeric(str_split_fixed(Result, "-", 2)[, 1]),
         `Opponent Goals` = as.numeric(str_split_fixed(Result, "-", 2)[, 2]),
         Points = case_when(
           Team_Goals > `Opponent Goals` ~ 3,
           Team_Goals == `Opponent Goals` ~ 1,
           TRUE ~ 0
         ),
         Result = NULL) # Tar bort Result


# Generar MatchID's

Team_Mdf$MatchID <- NA

pair_id <- 1
for(i in 1:nrow(Team_Mdf)) {
  if(is.na(Team_Mdf$MatchID[i])) {
    opponent <- Team_Mdf$Opponent[i]
    matchday <- Team_Mdf$Matchday[i]
    division <- Team_Mdf$Division[i]
    season <- Team_Mdf$Season[i]
    paired_row <- which(Team_Mdf$Club == opponent & Team_Mdf$Matchday == matchday &
                          Team_Mdf$Division == division & Team_Mdf$Season == season)
    # Ger samma MatchID till samma match
    Team_Mdf$MatchID[i] <- pair_id
    Team_Mdf$MatchID[paired_row] <- pair_id
    pair_id <- pair_id + 1
  }
}

# Tar bort överflödiga variabler
rm(opponent, matchday, division, season, paired_row, i, pair_id)

```


### Mirror Team Match-Data
```{r message=FALSE, warning=FALSE}
# Depricated (användes inte till något i rapporten)

# Data frame över ett lags prestationer över en match samt motståndets prestation

# Klonar Team_mdf
Mirror_Mdf <- Team_Mdf 

# Deffinerar variabler över Opponent data
baserow <- ncol(Team_Mdf)
varname <- Team_Mdf[-c(1:5)] %>% omit.col("MatchID") %>% colnames()
opponent_index <- (1 + baserow):(2 * baserow - 5)

# Skapar kolumner för opponent data
for (var in varname) {
  Mirror_Mdf[[paste0("Opponent ", var)]] <- NA
}

# Variabler för loop
club <- Mirror_Mdf$Club
matchday <- Mirror_Mdf$Matchday
division <- Mirror_Mdf$Division
season <- Mirror_Mdf$Season
opponent <- Mirror_Mdf$Opponent

# Hittar par och sätter ihop dom
for (i in 1:nrow(Mirror_Mdf)) {
  for (j in seq_along(varname)) {
    mirrormatchvec <- club[i] == opponent & matchday[i] == matchday &
      division[i] == division & season[i] == season
    
    
    if (any(mirrormatchvec)) {
      Mirror_Mdf[i, paste0("Opponent ", varname[j])] <- Mirror_Mdf[mirrormatchvec, varname[j]][1]
    } else {
      Mirror_Mdf[i, paste0("Opponent ", varname[j])] <- 0
    }
  }
}

# Tar bort överflödiga variabler
rm(club, baserow, opponent_index, club, matchday, division,
   season, opponent,i, j, mirrormatchvec, var, varname)

```


Giving Player_MDF MAtchID
```{r message=FALSE, warning=FALSE}

Player_Mdf$MatchID <- NA

# Kollar för vilka iterationer Team_Mdf och Player_Mdf matchar
for(i in 1:nrow(Player_Mdf)) {
  match_ids <- which((Team_Mdf$Club == Player_Mdf$Opponent[i] & Team_Mdf$Opponent == Player_Mdf$Club[i] & 
                        Team_Mdf$Matchday == Player_Mdf$Matchday[i] & 
                        Team_Mdf$Division == Player_Mdf$Division[i] & 
                        Team_Mdf$Season == Player_Mdf$Season[i]) |
                       (Team_Mdf$Opponent == Player_Mdf$Club[i] & Team_Mdf$Club == Player_Mdf$Opponent[i] & 
                          Team_Mdf$Matchday == Player_Mdf$Matchday[i] & 
                          Team_Mdf$Division == Player_Mdf$Division[i] & 
                          Team_Mdf$Season == Player_Mdf$Season[i]))
  
  # Om det matchar, lägg till MatchID
  if(length(match_ids) == 1) {
    Player_Mdf$MatchID[i] <- Team_Mdf$MatchID[match_ids]
  } 
}

rm(match_ids, i)

```


Splitar datan så vi får tränings-data och vaildering-data
```{r message=FALSE, warning=FALSE}

if (length(unique(Team_Mdf$MatchID)) == 1130) {
  
  # Väljer vilka matcher som går till vilken data
  
  set.seed(123)
  andel <- 0.8   #Andel av data i modell-träningen 
  unique_pairs <- unique(Team_Mdf$MatchID)
  training_pairs <- sample(unique_pairs, length(unique_pairs) * andel)
  
  
  
  # Splittar Player_Mdf
  Training_Player_Mdf <- Player_Mdf[Player_Mdf$MatchID %in% training_pairs,]
  Validating_Player_Mdf <- Player_Mdf[!Player_Mdf$MatchID %in% training_pairs,]
  
  # Splittar Team_Mdf
  Training_Team_Mdf <- Team_Mdf[Team_Mdf$MatchID %in% training_pairs,]
  Validating_Team_Mdf <- Team_Mdf[!Team_Mdf$MatchID %in% training_pairs,]
  
  # Splittar Mirror_Mdf
  Training_Mirror_Mdf <- Mirror_Mdf[Mirror_Mdf$MatchID %in% training_pairs,]
  Validating_Team_Mdf <- Mirror_Mdf[!Mirror_Mdf$MatchID %in% training_pairs,]
  
  
  rm(unique_pairs, training_pairs)
  
  Full_DATA <- list( "Grund_data" = Grund_data,
                     "Player_Mdf" = Player_Mdf,
                     "Team_Mdf" = Team_Mdf)
  
  Validerings_Data <- list( "Player_Mdf" = Validating_Player_Mdf,
                            "Team_Mdf" = Validating_Team_Mdf,
                            "Mirror_Mdf" = Validating_Team_Mdf)
  
  Player_Mdf <- Training_Player_Mdf
  Team_Mdf <- Training_Team_Mdf
  Mirror_Mdf <- Training_Mirror_Mdf
  
}
rm(Training_Mirror_Mdf, Training_Player_Mdf, Training_Team_Mdf,
   Validating_Player_Mdf, Validating_Team_Mdf, Validating_Team_Mdf, andel)



```


Skapar Team Season-Data
```{r message=FALSE, warning=FALSE}

Team_Sdf <- Team_Mdf %>%
  omit.col(c("Result", "Opponent", "Matchday", "MatchID")) %>% # Tar bort variabler
  group_by(Season, Club, Division) %>% # Agregerar på
  summarise(across(everything(), sum, na.rm = TRUE), .groups = 'drop') # Tar summan av alla variabler


```



### Tar bort matcher med Röda kort
```{r message=FALSE, warning=FALSE}

# Filtrerar bort matcher under 900 minuter pga röda kort. Team_Mdf and Mirrordf
unique_matchIDs <- unique(Team_Mdf$MatchID[!Team_Mdf$`Minutes Played` == 900])

Player_Mdf <- Player_Mdf[!Player_Mdf$MatchID %in% unique_matchIDs, ] %>%
  omit.col(c("Red Cards"))

Team_Mdf <- Team_Mdf[!Team_Mdf$MatchID %in% unique_matchIDs, ] %>%
  omit.col(c("Minutes Played", "Red Cards"))


Mirror_Mdf <- Mirror_Mdf[!Mirror_Mdf$MatchID %in% unique_matchIDs, ] %>%
  omit.col(c("Opponent Minutes Played", "Minutes Played", "Red Cards"))

rm(unique_matchIDs)

```



________________________________________________________________________________
________________________________________________________________________________



Model 1 - Modell över basvariabler
```{r message=FALSE, warning=FALSE}

# Model Disruptive Variables - vector
MDV_vec <- c("Club", "Opponent", "Matchday", "Division", "Season",
             "Opponent Goals", "Team_Goals", "Points", "Shots", "MatchID", "ID", "Assists", "Key Passes", "Key Headers")

# Modell 1
modeldf1 <- Team_Mdf %>%
  omit.col( c(MDV_vec))

model_1 <- glm(`Shots on Target` ~ ., family = "poisson", modeldf1)
summary(model_1)
vif(model_1)


# Skapar lista att spara modeller i
if (!exists("Models")) Models <- list()

Models[["Model_1"]] <- list("modeldf1" = modeldf1,"model_1" = model_1)
rm(modeldf1, model_1)



```

Model 2 - Modell över basvariabler minus Multikollinära variabler 
```{r message=FALSE, warning=FALSE}

# Redunant Multicollinary Variables - vector
RMV_vec <- c( "Attempted Passes",      # Multikollinäritet
              "Attempted Tackles",     # Multikollinäritet
              "Attempted Headers",     # Multikollinäritet
              "Key Passes",
              "Assists")            # För hög korrelation med Y = shots

# Modell 2, ingen multikollinearitet
modeldf2 <- Team_Mdf %>%
  omit.col( c(MDV_vec, RMV_vec))

model_2 <- glm(`Shots on Target` ~ ., family = "poisson", modeldf2)
summary(model_2)
vif(model_2)

Models[["Model_2"]] <- list("modeldf2" = modeldf2,"model_2" = model_2)
rm(modeldf2, model_2)

```



Model 3 (Full) - Modell över (basvariabler, interaktioner och kvadrater), minus  Multikollinära basvariabler 
```{r message=FALSE, warning=FALSE}

# Modell 3, interaktioner tillagda, våran fulla modell

modeldf3 <- Team_Mdf %>%
  omit.col( c(MDV_vec, RMV_vec)) %>%
  create_interactions(y = "Shots on Target")

model_3 <- glm(`Shots on Target` ~ ., family = "poisson", modeldf3)


Models[["Model_3(FULL)"]] <- list("modeldf3" = modeldf3,"model_3" = model_3)

rm(model_3, modeldf3)

```


Model 4 - Reducerad med hjälp av LR-test på interaktioner med högt p-värde på wald-test
```{r message=FALSE, warning=FALSE}


Var_Red_vec <- Interaction_LR_test(
  Models[["Model_3(FULL)"]][["modeldf3"]],   # Full modell
  ncol(Models[["Model_2"]][["modeldf2"]]))   # Antalet basvariabler

# Då p-val är över 0.05 använder vi modellen med färre interaktioner


Reduced_df1 <- Models[["Model_3(FULL)"]][["modeldf3"]] %>%
  omit.col( c(MDV_vec, RMV_vec, Var_Red_vec ))


model_4 <- glm(`Shots on Target` ~ ., family = "poisson", Reduced_df1)
summary(model_4)

Models[["Model_4"]] <- list("Reduced_df1" = Reduced_df1,"model_4" = model_4)

rm(model_4, Reduced_df1)

```



Model 5 - Framåt AIC på model 4 (reducerad_df1)
```{r}
Reduced_df1 <- Models[["Model_4"]][["Reduced_df1"]]

model_5 <- forwardAIC_poisson(Reduced_df1 ,"Shots on Target")
Reduced_df2 <- model_5[["model"]]
summary(model_5)
vif(model_5)

Models[["Model_5"]] <- list("Reduced_df2" = Reduced_df2,"model_5" = model_5)
rm(Reduced_df1, model_5)

```


________________________________________________________________________________
________________________________________________________________________________

```{r}
model <- Models[["Model_5"]][["model_5"]]
data_frame <- Models[["Model_5"]][["Reduced_df2"]]

extrema_goals <- unique(Team_Mdf$ID[(Team_Mdf$Team_Goals + Team_Mdf$`Opponent Goals`) > 8 & abs(Team_Mdf$Team_Goals - Team_Mdf$`Opponent Goals`) > 4])
Extrem_värden <- c(c(441, 1396), c(1471, 1644), extrema_goals)

leverage <- lm.influence(model)$hat
leverage_plot <- data.frame("ID" = 1:length(leverage), "Leverage" = leverage)
n <- nrow(data_frame)
p <- length(model[["coefficients"]])
ggplot(leverage_plot) + aes(x = ID, y = Leverage) + geom_point(data = leverage_plot[!(leverage_plot$ID %in% Extrem_värden), ], alpha = 0.6) + geom_point(data = leverage_plot[leverage_plot$ID %in% Extrem_värden, ], col = "#ff9900") +
  geom_point(data = leverage_plot[c(1471, 1644), ], col = "#48adb7") +
  geom_point(data = leverage_plot[c(441, 1396), ], col = "#48adb7") +
  theme_bw() + ggtitle("Graf över leverage-värdet för alla obseravationer")



leverage_plot <- leverage_plot[order(-leverage), ]
data_frame["ID"] <- 1:n
#View(data_frame[data_frame$ID %in% leverage_plot[1:10, 1], ])

Team_Mdf["ID"] <- 1:n
#View(Team_Mdf[Team_Mdf$ID %in% leverage_plot[1:10, 1], ])
#View(Team_Mdf[Team_Mdf$ID %in% leverage_plot[1:3, 1], ])
rm(leverage, leverage_plot, n, p, model, data_frame)
```


```{r}
#matchid =  1102 är den som passar mycket, ID = c(1471, 1644)
#514 = matchid, c(441, 1396) = ID, 5 clearances, 5-0. 

extrema_goals <- unique(Team_Mdf$MatchID[(Team_Mdf$Team_Goals + Team_Mdf$`Opponent Goals`) > 8 & abs(Team_Mdf$Team_Goals - Team_Mdf$`Opponent Goals`) > 4])
Extrem_värden <- c(1102, 514, extrema_goals)
Reduced_df3.0 <- Team_Mdf[!Team_Mdf$MatchID %in% Extrem_värden,]

Reduced_df3 <- Reduced_df3.0 %>%
  omit.col( c(MDV_vec, RMV_vec)) %>% 
  create_interactions(y = "Shots on Target") %>%
  omit.col( c(Var_Red_vec)) 


# Modell 6, vår slutgilltiga modell, efter extremvärden är borttagna
model_6 <- forwardAIC_poisson(Reduced_df3 ,"Shots on Target")

summary(model_6)

Models[["Model_6"]] <- list("Reduced_df3" = Reduced_df3,"model_6" = model_6)


rm(model_6)
```





```{r message=FALSE, warning=FALSE}

model <- Models[["Model_6"]][["model_6"]]

Y <- model[["model"]]$`Shots on Target`
fits <- model[["fitted.values"]]

plot_df <- data.frame("Y" = Y, "fits" = fits)

p1 <- ggplot(plot_df) + geom_histogram(aes(x = fits), col = "black", fill = "#e6e5e1", alpha = 1, binwidth = 1) +
  geom_bar(aes(x = Y), col = "#409891", fill = "#48adb7", width = 0.2, alpha = 1) +
  theme_bw() + xlim(-1, 25) + labs(x= "Skott på mål", y = "") + ggtitle("Fördelning i träningsdatan")

# Skapar prediktioner i valideringsdata

Validation_df_X <- create_interactions(Validerings_Data$Team_Mdf, y = "Shots on Target", v = c("Name", "Nationality", "Position", "Result", MDV_vec))
Validation_df_X <- Validation_df_X[str_remove_all(names(model$coefficients), "`")[-1]]
Validation_df_X <- cbind(1, Validation_df_X)
beta <- model$coefficients

Validation_df_X["fits"] <- 0
for (i in seq(nrow(Validation_df_X)) ) {
  #browser()
  Validation_df_X$fits[i] <-  sum(unlist(Validation_df_X[i, ])[-ncol(Validation_df_X)]*beta)
}


plot_df <- data.frame("Y" = Validerings_Data$Team_Mdf$`Shots on Target`, "fits" = exp(Validation_df_X$fits))

p2 <- ggplot(plot_df) + geom_histogram(aes(x = fits), col = "black", fill = "#e6e5e1", alpha = 1, binwidth = 1) +
  geom_bar(aes(x = Y), col = "#409891", fill = "#48adb7", width = 0.2, alpha = 1) +
  theme_bw() + xlim(-1, 25) + labs(x= "Skott på mål", y = "") + ggtitle("Fördelning i valideringsdatan")

ggarrange(
  p1,
  p2
)

rm(model_6, Y, fits, plot_df, p1, p2)
```


```{r message=FALSE, warning=FALSE}

Team_Sdf["Shot_Effectiveness"] <- Team_Sdf$Team_Goals/Team_Sdf$`Shots on Target`

shot_e_lookup <- function(club, season) {
  
  return(Team_Sdf$Shot_Effectiveness[Team_Sdf$Club == club & Team_Sdf$Season == season])
}



df_X <- cbind(1, Models[["Model_3(FULL)"]][["modeldf3"]])

#För valideringsdata:
#df_X <- Validation_df_X <- cbind(1, create_interactions(Validerings_Data$Team_Mdf, y = "Shots on Target", v = c("Name", "Nationality", "Position", "Result", MDV_vec)))

colnames(df_X)[1] <- "(Intercept)"
df_X <- df_X[, str_remove_all(names(Models$Model_6$model_6$coefficients), "`")]
antal_variabler <- ncol(df_X)
opponent_index <- (antal_variabler + 2):(2*antal_variabler + 1)
df_X["MatchID"] <- Team_Mdf$MatchID
df_X <- df_X[df_X$MatchID%in%Reduced_df3.0$MatchID, ]



df_X[, opponent_index] <- 0
colnames(df_X)[opponent_index] <- str_c("O ", colnames(df_X)[1:antal_variabler])

# Lägger motståndarnas prestaioner på samma rad som de egna prestationerna så att resultatet för
# modellen kan predikteras mha Epts_function
for (i in seq(nrow(df_X)) ) {
  opponents_match <- df_X$MatchID %in% df_X$MatchID[i]
  opponents_match[i] <- FALSE
  df_X[i, opponent_index] <- df_X[ opponents_match, 1:antal_variabler]
  
}

Epts_function <- function(row_in_df_X, model = Models$Model_6$model_6) {
  
  
  shot_effectiveness_f <- shot_e_lookup(Reduced_df3.0$Club[row_in_df_X], Reduced_df3.0$Season[row_in_df_X])
  shot_effectiveness_o <- shot_e_lookup(Reduced_df3.0$Opponent[row_in_df_X], Reduced_df3.0$Season[row_in_df_X])
  
  Beta <- model$coefficients
  
  # Lägg in interaktioner i df_X, i rätt ordning för att det här ska funka
  E_shots_f <- exp( sum( Beta * df_X[row_in_df_X, 1:antal_variabler] ) )
  E_shots_o <- exp( sum( Beta * df_X[row_in_df_X, opponent_index] ) )
  lamda_friendly <- shot_effectiveness_f * E_shots_f
  lambda_oppo <- shot_effectiveness_o * E_shots_o
  
  Pr_win <- 0
  Pr_draw <- 0
  
  for (goalamount in 0:20 ) {
    Pr_win <- Pr_win + ppois(goalamount - 1, lambda = lambda_oppo, lower.tail = TRUE) * 
      dpois(goalamount, lambda = lamda_friendly)
    
    Pr_draw <- Pr_draw + dpois(goalamount, lambda = lamda_friendly) * dpois(goalamount, lambda = lambda_oppo)
    
  }

  return( c(3*Pr_win + 1*Pr_draw, Pr_win, Pr_draw, 1-Pr_win-Pr_draw) )
}

Epts <- as.data.frame(matrix(0, nrow(df_X), 4))
colnames(Epts) <- c("Epts", "Pr_win", "Pr_draw", "Pr_loss")
for (i in seq(nrow(df_X))) {
  
  Epts[i, ] <- Epts_function(i)
  
}

df_X <- cbind(df_X, Epts)
Team_Mdf_noextreme <- Team_Mdf[Team_Mdf$MatchID%in%Reduced_df3.0$MatchID, ]
df_X["Club"] <- Team_Mdf_noextreme$Club

Team_Mdf_noextreme["Outcome"] <- 3 * as.numeric(Team_Mdf_noextreme$Team_Goals > Team_Mdf_noextreme$`Opponent Goals`)
Team_Mdf_noextreme$Outcome[Team_Mdf_noextreme$Team_Goals == Team_Mdf_noextreme$`Opponent Goals`] <- 1

# För valideringsdata:
# Validerings_Data$Team_Mdf["Outcome"] <- 3 * as.numeric(Validerings_Data$Team_Mdf$Team_Goals > Validerings_Data$Team_Mdf$`Opponent Goals`)
# Validerings_Data$Team_Mdf$Outcome[Validerings_Data$Team_Mdf$Team_Goals == Validerings_Data$Team_Mdf$`Opponent Goals`] <- 1
# 
# df_X["Outcome"] <- Validerings_Data$Team_Mdf$Outcome

df_X["Outcome"] <- Team_Mdf_noextreme$Outcome



```

Utvärdering av Pr_win Pr_draw Pr_loss
```{r}
df_X["Correct_prediction"] <- 0


for (i in seq(nrow(df_X)) ) {

  Max <- max(df_X$Pr_win[i], df_X$Pr_draw[i], df_X$Pr_loss[i])
  if (df_X$Outcome[i] == 3) {
    if (Max == df_X$Pr_win[i]) {
      df_X$Correct_prediction[i] <- 1
    }
  }
  else if(df_X$Outcome[i] == 1) {
    if (Max == df_X$Pr_draw[i]) {
      df_X$Correct_prediction[i] <- 1
    }
  }
  else if(df_X$Outcome[i] == 0){
    if (Max == df_X$Pr_loss[i]) {
      df_X$Correct_prediction[i] <- 1
    }
  }
  
}

# Räknar ut hur bra modellen predikterar olika typer av matcher, draws, wins, losses.
mean(df_X$Correct_prediction)
mean(df_X[df_X$Outcome==3, ]$Correct_prediction)
mean(df_X[df_X$Outcome==0, ]$Correct_prediction)
mean(df_X[df_X$Outcome==1, ]$Correct_prediction)

excel_df <- cbind(df_X[c(1:3, 1070), c(23:25)]%>%round(2), c("Draw", "Win", "Loss", "Loss"), df_X[c(1:3, 1070), 28]%>%round(2))
colnames(excel_df) <- c("P(Win)", "P(Draw)", "P(Loss)", "Outcome", "Correct prediction?")

```

Plottar devianser mot Y_hat för träning och valideringsdata
```{r}
ggplot(df_X) + geom_bar(aes(x=Outcome), col = "black", fill = "#48adb7") + 
  geom_histogram(aes(x=Epts), col = "black", fill = "#ff9900", bins = 4, alpha = 0.8) +
  theme_bw()

# Räknar ut devianser men struntar i y = 0.
Poisson.dev<-function(y, y_hat){

  answer <- sqrt( 2*( y*log(y/y_hat) - y + y_hat ) )
  #answer[y==0] <- 2*y_hat
  return(answer)
  }
residuals.deviance<- sqrt(Poisson.dev(Models[["Model_6"]][["Reduced_df3"]]$`Shots on Target`, Models[["Model_6"]][["model_6"]]$fitted.values))*ifelse(Models[["Model_6"]][["Reduced_df3"]]$`Shots on Target` > Models[["Model_6"]][["model_6"]]$fitted.values, 1, -1)

plot_df <- data.frame("Devians-Residualer" = residuals.deviance,
                         "Predikterade värden" = Models[["Model_6"]][["model_6"]]$fitted.values)
colnames(plot_df) <- c("Devians-Residualer", "Predikterade värden")
p1 <- ggplot(plot_df) + 
  geom_hline(yintercept = 0, col = "#ff9900") + 
  geom_point(aes(y = `Devians-Residualer`, x = `Predikterade värden`), col = "black", alpha = 0.6) + 
  theme_bw() + ylim(-2, 2) + xlim(0, 22) + ggtitle("Träningsdata")

p2 <- ggplot(Team_Mdf_noextreme) + geom_bar(aes(x=`Shots on Target`), col = "black", fill = "#48adb7") + theme_bw() + labs(y = "", x = "Skott på mål") + xlim(0, 23)

#Valideringsdata:
residuals.deviance<- sqrt(Poisson.dev(Validerings_Data$Team_Mdf$`Shots on Target`, exp(Validation_df_X$fits)))*ifelse(Validerings_Data$Team_Mdf$`Shots on Target` > exp(Validation_df_X$fits), 1, -1)

plot_df <- data.frame("Devians-Residualer" = residuals.deviance,
                         "Predikterade värden" = exp(Validation_df_X$fits))
colnames(plot_df) <- c("Devians-Residualer", "Predikterade värden")
p3 <- ggplot(plot_df) + 
  geom_hline(yintercept = 0, col = "#ff9900") + 
  geom_point(aes(y = `Devians-Residualer`, x = `Predikterade värden`), col = "black", alpha = 0.6) + 
  ylim(-2, 2) + xlim(0, 22) +
  theme_bw() + ggtitle("Valideringsdata")


p4 <- ggplot(Validerings_Data$Team_Mdf) + geom_bar(aes(x=`Shots on Target`), col = "black", fill = "#48adb7") + theme_bw() + labs(y = "", x = "Skott på mål") + xlim(0, 23)

ggarrange(p1, p3, p2, p4)

rm(p1, p2)
```

Plottar fördelning på 'shots on target'
```{r}

mean(Team_Mdf$`Shots on Target`)
var(Team_Mdf$`Shots on Target`)

x_values <- 0:max(Team_Mdf$`Shots on Target`, na.rm = TRUE)

# Poisson probabilities
poisson_probs <- dpois(x_values, lambda = mean(Team_Mdf$`Shots on Target`))

# Create a dataframe for the Poisson data
poisson_data <- data.frame(Shots = x_values, Probability = poisson_probs)

# Multiply by total number of observations to scale it to the histogram
poisson_data$Probability <- poisson_data$Probability * nrow(Team_Mdf)

# Create the histogram and add the Poisson curve
ggplot(Team_Mdf, aes(x = `Shots on Target`)) +
    geom_histogram(aes(y = ..count..), binwidth = 1, fill = "#bad0cc", color = "black") +
    geom_line(data = poisson_data, aes(x = Shots, y = Probability), color = "#ff9900", size = 1.5) +
    labs(title = "Fördelning 'Team Match Data' - Shots on Target ",
         x = "Shots on Target",
         y = "") +
    theme_bw() +
    theme(axis.text.x = element_text(size = 12, face = "bold"), 
          axis.text.y = element_text(size = 12, face = "bold"))
```



```{r}


PAR_df <- Player_Mdf[, !str_detect(colnames(Player_Mdf), "%")]
PAR_df <- create_interactions(PAR_df, y = "Shots on Target", v = c("Name", "Nationality", "Position", "Result", MDV_vec))
PAR_df["(Intercept)"] <- 1



PAR_df <- PAR_df[PAR_df$MatchID%in%df_X$MatchID, c(colnames(df_X)[1:(antal_variabler + 1)], "Minutes Played", "Club", "Season", "Name")]

average_player_contributions_perminute <- colMeans(PAR_df[1:antal_variabler]/PAR_df$`Minutes Played`)
average_player_contributions_perminute[1] <- 1/90

PAR_df["Epts"] <- 0

# Ersätter spelaren med en generisk spelare och räknar ut skillnaden i förväntade
# ligapoäng som ett PAR-mått
for (i in seq(nrow(PAR_df)) ) {
  
    matchindex_i_df_X <- which(PAR_df$MatchID[i] == df_X$MatchID & 
                         PAR_df$Club[i] == df_X$Club)
  
    spelare_att_byta_ut <- PAR_df[i, 1:antal_variabler]
    
    df_X[matchindex_i_df_X, 1:antal_variabler] <- df_X[matchindex_i_df_X, 1:antal_variabler] - spelare_att_byta_ut + 
        average_player_contributions_perminute * PAR_df$`Minutes Played`[i]
      
    points <- Epts_function(matchindex_i_df_X)[1]
    
    df_X[matchindex_i_df_X, 1:antal_variabler] <- df_X[matchindex_i_df_X, 1:antal_variabler] + spelare_att_byta_ut - 
      average_player_contributions_perminute * PAR_df$`Minutes Played`[i]
    
    PAR_df$Epts[i] <- df_X$Epts[matchindex_i_df_X] - points
   
}


```

```{r message=FALSE, warning=FALSE}


#saveRDS(PAR_df, "PAR_df.rds")
#PAR_df <- readRDS("PAR_df.rds")


# Aggregerar spelarnas PAR på säsonger
Season_PAR <- PAR_df[, (antal_variabler+2):ncol(PAR_df)] %>%
  omit.col(c("Club")) %>% # Tar bort variabler
  group_by(Season, Name) %>% # Agregerar på
  summarise(across(everything(), sum, na.rm = TRUE), .groups = 'drop') # Tar summan av alla variabler
Season_PAR$Epts <- Season_PAR$Epts / (Season_PAR$`Minutes Played` / 90)
```
